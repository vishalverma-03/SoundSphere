<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" class="injected-svg" data-src="/icons/volume-low-stroke-rounded.svg" xmlns:xlink="http://www.w3.org/1999/xlink" role="img" color="#000000">
<path d="M19 9C19.6254 9.81968 20 10.8634 20 12C20 13.1366 19.6254 14.1803 19 15" stroke="#000000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
<path d="M16 14.8135V9.18646C16 6.04126 16 4.46866 15.0747 4.0773C14.1494 3.68593 13.0603 4.79793 10.8823 7.02192C9.75439 8.17365 9.11085 8.42869 7.50604 8.42869C6.10257 8.42869 5.40084 8.42869 4.89675 8.77262C3.85035 9.48655 4.00852 10.882 4.00852 12C4.00852 13.118 3.85035 14.5134 4.89675 15.2274C5.40084 15.5713 6.10257 15.5713 7.50604 15.5713C9.11085 15.5713 9.75439 15.8264 10.8823 16.9781C13.0603 19.2021 14.1494 20.3141 15.0747 19.9227C16 19.5313 16 17.9587 16 14.8135Z" stroke="#000000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
</svg>
<!-- console.log("hello js");
let currentSong = new Audio();
let songs;

// function to convert the min in sec
function convertSecondsToTime(seconds) {
  if (isNaN(seconds) || seconds < 0) {
    return "00:00";
  }

  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = Math.floor(seconds % 60);

  const formattedMinutes = String(minutes).padStart(2, "0");
  const formattedSeconds = String(remainingSeconds).padStart(2, "0");

  return `${formattedMinutes}:${formattedSeconds}`;
}

async function getSongs() {
  let a = await fetch("/songs/");
  let response = await a.text();

  let div = document.createElement("div");
  div.innerHTML = response;

  let as = div.querySelectorAll("ul#files.view-tiles li a");
  let songs = [];

  as.forEach((element) => {
    if (element.classList.contains("icon-mp3")) {
      // Use the absolute path for audio playback
      const audioPath = new URL(
        element.getAttribute("href"),
        window.location.href
      ).pathname;
      songs.push(audioPath);
    }
  });

  return songs;
}
const playMusic = (track, pause = false) => {
  currentSong.src = track;
  if (!pause) {
    currentSong.play();
    play.src = "pause.svg";
  }
  document.querySelector(".song-info").innerHTML = decodeURI(track).replace(
    /song/,
    " "
  );
  document.querySelector(".song-time").innerHTML = "00:00/00:00";
};

async function main() {
  songs = await getSongs();
  playMusic(songs[0], true);
  console.log(songs);

  let songUL = document
    .querySelector(".song-list")
    .getElementsByTagName("ul")[0];

  for (const song of songs) {
    // Remove date and time information from the song name

    let songName = song.split("/").pop();
    let orignal_song = song;

    // Replace %20 with space in the modified song name
    songName = songName.replace(/%20/g, " ");
    let [modifiedSongName, artistName] = songName
      .split("-")
      .map((part) => part.trim());

    artistName = artistName.replace(/\.mp3$/, "");
    // Add ".mp3" to the modified song name
    modifiedSongName = `${modifiedSongName}.mp3`;

    songUL.innerHTML += `            
      <li>
        <div class="music-icon invert"><img src="music.svg" alt=""></div>
        <div class="info"> <div class="org">${orignal_song}</div>${modifiedSongName} <br>${artistName}</div>
        <div class="play-lib-music"><img src="play-btn-lib.svg" alt=""></div>
      </li>`;
  }
  // event listner to each song
  Array.from(
    document.querySelector(".song-list").getElementsByTagName("li")
  ).forEach((e) => {
    console.log(e);
    e.addEventListener("click", () => {
      let originalSongName = e.querySelector(".info .org").innerHTML;
      console.log(originalSongName);
      playMusic(originalSongName);
    });
  });

  play.addEventListener("click", () => {
    if (currentSong.paused) {
      currentSong.play();
      play.src = "pause.svg";
    } else {
      currentSong.pause();
      play.src = "play.svg";
    }
  });

  // time update
  currentSong.addEventListener("timeupdate", () => {
    console.log(currentSong.currentTime, currentSong.duration);
    document.querySelector(".song-time").innerHTML = `${convertSecondsToTime(
      currentSong.currentTime
    )}/${convertSecondsToTime(currentSong.duration)}`;
    document.querySelector(".circle").style.left =
      (currentSong.currentTime / currentSong.duration) * 100 + "%";
  });
  document.querySelector(".seek-bar").addEventListener("click", (e) => {
    let percent = (e.offsetX / e.target.getBoundingClientRect().width) * 100;
    document.querySelector(".circle").style.left = percent + "%";
    currentSong.currentTime = (currentSong.duration * percent) / 100;
  });
  document.querySelector(".hamburger").addEventListener("click", (e) => {
    document.querySelector(".left").style.left = "0";
  });
  document.querySelector(".cut").addEventListener("click", (e) => {
    document.querySelector(".left").style.left = "-115%";
  });
  // Define a variable to keep track of the current song index
  let currentSongIndex = 0;

  // Function to play the next song
  const playNext = () => {
    currentSongIndex = (currentSongIndex + 1) % songs.length;
    playMusic(songs[currentSongIndex]);
    console.log("Playing next song. Current index:", currentSongIndex);
  };

  // Function to play the previous song
  const playPrevious = () => {
    currentSongIndex = (currentSongIndex - 1 + songs.length) % songs.length;
    playMusic(songs[currentSongIndex]);
    console.log("Playing previous song. Current index:", currentSongIndex);
  };

  // Event listeners for next and previous buttons using querySelector
  document.querySelector("#next").addEventListener("click", playNext);
  document.querySelector("#prev").addEventListener("click", playPrevious);

  document.querySelector(".volume").addEventListener("mouseenter", function () {
    document.querySelector(".input-vol").style.display = "block";
  });

  document.querySelector(".volume").addEventListener("mouseleave", function () {
    document.querySelector(".input-vol").style.display = "none";
  });

  document.querySelector(".input-vol").addEventListener("input", function () {
    // Adjust the volume of the current song based on the input value
    currentSong.volume = parseFloat(this.value / 100);
  });
  document.getElementById("vol-image").addEventListener("click", function () {
    if (currentSong.volume !== 0) {
      console.log("setting volume to zero");
      document.querySelector(".input-vol").value = 0;
      document.getElementById("vol-image").src = "mute.svg";
      currentSong.volume = 0;
    } else {
      console.log("setting volume to 0.5");
      document.querySelector(".input-vol").value = 0.7 * 100;
      document.getElementById("vol-image").src = "volume-high.svg";

      currentSong.volume = 0.7;
    }
  });

  document.querySelector(".input-vol").addEventListener("input", function () {
    let volume_song = currentSong.volume;
    const volumeImage = document.getElementById("vol-image");

    if (volume_song > 0 && volume_song < 0.45) {
      volumeImage.src = "volume.svg"; // Change the image src to low.svg
    } else if (volume_song > 0.45) {
      volumeImage.src = "volume-high.svg"; // Change the image src to high.svg
    }

    if (volume_song == 0) {
      volumeImage.src = "mute.svg"; // Change the image src to mute.svg
    }
  });
}

main();
 -->